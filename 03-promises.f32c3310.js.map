{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAKbQ,SAASC,eAAe,gBAAgBC,iBAAiB,UAAU,SAAUC,GAC3EA,EAAMC,iBACN,MAAMC,EAAW,IAAIC,SAASH,EAAMI,QAC9BC,EAAaC,SAASJ,EAASK,IAAI,UACnCC,EAAYF,SAASJ,EAASK,IAAI,SAClCE,EAASH,SAASJ,EAASK,IAAI,WAGrC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAEhCvB,EAAcuB,EADOL,GAAcK,EAAI,GAAKF,GAEzCG,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Function to create a promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Function to handle form submission\ndocument.getElementById(\"promise-form\").addEventListener(\"submit\", function (event) {\n  event.preventDefault();\n  const formData = new FormData(event.target);\n  const firstDelay = parseInt(formData.get(\"delay\"));\n  const delayStep = parseInt(formData.get(\"step\"));\n  const amount = parseInt(formData.get(\"amount\"));\n\n  // Create and handle promises\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = firstDelay + (i - 1) * delayStep;\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","getElementById","addEventListener","event","preventDefault","formData","FormData","target","firstDelay","parseInt","get","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.f32c3310.js.map"}